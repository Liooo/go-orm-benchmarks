//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Models = newModelsTable("public", "models", "")

type modelsTable struct {
	postgres.Table

	// Columns
	ID      postgres.ColumnInteger
	Name    postgres.ColumnString
	Title   postgres.ColumnString
	Fax     postgres.ColumnString
	Web     postgres.ColumnString
	Age     postgres.ColumnInteger
	Right   postgres.ColumnBool
	Counter postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ModelsTable struct {
	modelsTable

	EXCLUDED modelsTable
}

// AS creates new ModelsTable with assigned alias
func (a ModelsTable) AS(alias string) *ModelsTable {
	return newModelsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ModelsTable with assigned schema name
func (a ModelsTable) FromSchema(schemaName string) *ModelsTable {
	return newModelsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ModelsTable with assigned table prefix
func (a ModelsTable) WithPrefix(prefix string) *ModelsTable {
	return newModelsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ModelsTable with assigned table suffix
func (a ModelsTable) WithSuffix(suffix string) *ModelsTable {
	return newModelsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newModelsTable(schemaName, tableName, alias string) *ModelsTable {
	return &ModelsTable{
		modelsTable: newModelsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newModelsTableImpl("", "excluded", ""),
	}
}

func newModelsTableImpl(schemaName, tableName, alias string) modelsTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		TitleColumn    = postgres.StringColumn("title")
		FaxColumn      = postgres.StringColumn("fax")
		WebColumn      = postgres.StringColumn("web")
		AgeColumn      = postgres.IntegerColumn("age")
		RightColumn    = postgres.BoolColumn("right")
		CounterColumn  = postgres.IntegerColumn("counter")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn, TitleColumn, FaxColumn, WebColumn, AgeColumn, RightColumn, CounterColumn}
		mutableColumns = postgres.ColumnList{NameColumn, TitleColumn, FaxColumn, WebColumn, AgeColumn, RightColumn, CounterColumn}
	)

	return modelsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Name:    NameColumn,
		Title:   TitleColumn,
		Fax:     FaxColumn,
		Web:     WebColumn,
		Age:     AgeColumn,
		Right:   RightColumn,
		Counter: CounterColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
